# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
RED=\033[0;31m
GREEN=\033[0;32m
YELLOW=\033[1;33m
BLUE=\033[0;34m
PURPLE=\033[0;35m
CYAN=\033[0;36m
WHITE=\033[1;37m
NC=\033[0m # No Color

# –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
CHECK=‚úì
CROSS=‚úó
ARROW=‚Üí
BUILDING=üî®
PACKAGE=üì¶

GOMOBILE_REPO = https://github.com/protonjohn/gomobile.git
GOMOBILE_TV_OS_BRANCH = pr/jkb/add-tvos-xros-support

BUILDDIR=$(shell pwd)/build
BUILDDIR_GOMOBILE=$(BUILDDIR)/gomobile
BUILDDIR_GOMOBILE_CMD=$(BUILDDIR_GOMOBILE)/cmd/gomobile

GOMOBILE=$(BUILDDIR)/gomobile_with_tvos
GOBIND=$(GOMOBILE) bind

BUILDDIR_IOS=$(BUILDDIR)/ios
BUILDDIR_MACOS=$(BUILDDIR)/macos
BUILDDIR_ANDROID=$(BUILDDIR)/android

APPLE_ARTIFACT=$(BUILDDIR)/XRayCoreIOSWrapper.xcframework
ANDROID_ARTIFACT=$(BUILDDIR)/xray.aar

IOS_TARGET=ios/arm64
TV_OS_TARGET=appletvos
TV_OS_SIMULATOR_TARGET=appletvsimulator
IOS_SIMULATOR_TARGET=iossimulator
MACOS_TARGET=macos
MACOSX_TARGET=maccatalyst

IOS_VERSION=14.0
ANDROID_API=24

LDFLAGS='-s -w -extldflags -lresolv'
IMPORT_PATH=github.com/JustYay/XrayCore-BasicWrapper

BUILD_GOMOBILE = "cd $(BUILDDIR) && git clone $(GOMOBILE_REPO) && cd $(BUILDDIR_GOMOBILE) && git checkout $(GOMOBILE_TV_OS_BRANCH) && cd $(BUILDDIR_GOMOBILE_CMD) && go build -o $(GOMOBILE)"

BUILD_ANDROID="cd $(BUILDDIR_ANDROID) && $(GOBIND) -v -androidapi $(ANDROID_API) -ldflags='-s -w' $(IMPORT_PATH)"

BUILD_IOS="cd $(BUILDDIR) && $(GOBIND) -a -ldflags $(LDFLAGS) -target=$(IOS_TARGET),$(IOS_SIMULATOR_TARGET) -o $(APPLE_ARTIFACT) $(IMPORT_PATH)"
BUILD_IOS_SIMULATOR="cd $(BUILDDIR) && $(GOBIND) -a -ldflags $(LDFLAGS) -target=$(IOS_SIMULATOR_TARGET) -o $(APPLE_ARTIFACT) $(IMPORT_PATH)" 

BUILD_MACOS ="cd $(BUILDDIR) && $(GOBIND) -a -ldflags $(LDFLAGS) -target=$(MACOS_TARGET) -o $(APPLE_ARTIFACT) $(IMPORT_PATH)" 

BUILD_ALL_APPLE_PLATFORMS = "cd $(BUILDDIR) && $(GOBIND) -a -ldflags $(LDFLAGS) -target=$(TV_OS_TARGET),$(TV_OS_SIMULATOR_TARGET),$(IOS_TARGET),$(IOS_SIMULATOR_TARGET),$(MACOS_TARGET) -o $(APPLE_ARTIFACT) $(IMPORT_PATH)"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
define log_info
	@echo "$(CYAN)$(ARROW) $(1)$(NC)"
endef

define log_success
	@echo "$(GREEN)$(CHECK) $(1)$(NC)"
endef

define log_error
	@echo "$(RED)$(CROSS) $(1)$(NC)"
endef

define log_building
	@echo "$(YELLOW)$(BUILDING) $(1)$(NC)"
endef

define log_package
	@echo "$(PURPLE)$(PACKAGE) $(1)$(NC)"
endef

define print_header
	@echo ""
	@echo "$(WHITE)‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó$(NC)"
	@echo "$(WHITE)‚ïë                    XRay Core Mobile Wrapper                  ‚ïë$(NC)"
	@echo "$(WHITE)‚ïë                        Build System                          ‚ïë$(NC)"
	@echo "$(WHITE)‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù$(NC)"
	@echo ""
endef

gomobiletvos:
	$(call print_header)
	$(call log_info, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–µ–¥—ã —Å–±–æ—Ä–∫–∏...")
	@mkdir -p $(BUILDDIR)
	$(call log_building, "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–±–æ—Ä–∫–∞ gomobile —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π tvOS...")
	@eval $(BUILD_GOMOBILE) && $(call log_success, "gomobile —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!") || $(call log_error, "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ gomobile")

all: clean gomobiletvos allapple 
	$(call log_package, "–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≥–æ—Ç–æ–≤—ã.")

allapple:
	$(call log_building, "–°–±–æ—Ä–∫–∞ –¥–ª—è –≤—Å–µ—Ö Apple –ø–ª–∞—Ç—Ñ–æ—Ä–º (iOS, tvOS, macOS)...")
	@eval $(BUILD_ALL_APPLE_PLATFORMS) && $(call log_success, "Apple –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã!") || $(call log_error, "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Apple –ø–ª–∞—Ç—Ñ–æ—Ä–º")
	$(call log_package, "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç: $(APPLE_ARTIFACT)")

ios:
	$(call print_header)
	$(call log_info, "–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É –¥–ª—è iOS...")
	@$(MAKE) gomobiletvos
	@mkdir -p $(BUILDDIR_IOS)
	$(call log_building, "–ö–æ–º–ø–∏–ª—è—Ü–∏—è iOS framework...")
	@eval $(BUILD_IOS) && $(call log_success, "iOS framework —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!") || $(call log_error, "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ iOS")
	$(call log_package, "iOS –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: $(APPLE_ARTIFACT)")

macos:
	$(call print_header)
	$(call log_info, "–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É –¥–ª—è macOS...")
	@$(MAKE) gomobiletvos
	@mkdir -p $(BUILDDIR_MACOS)
	$(call log_building, "–ö–æ–º–ø–∏–ª—è—Ü–∏—è macOS framework...")
	@eval $(BUILD_MACOS) && $(call log_success, "macOS framework —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!") || $(call log_error, "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ macOS")
	$(call log_package, "macOS –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: $(APPLE_ARTIFACT)")

android:
	$(call print_header)
	$(call log_info, "–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É –¥–ª—è Android...")
	$(call log_building, "–ü—Ä–æ–≤–µ—Ä–∫–∞ gomobile...")
	@command -v gomobile >/dev/null 2>&1 || { $(call log_error, "gomobile –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: go install golang.org/x/mobile/cmd/gomobile@latest"); exit 1; }
	@mkdir -p $(BUILDDIR_ANDROID)
	$(call log_building, "–ö–æ–º–ø–∏–ª—è—Ü–∏—è Android AAR...")
	@eval $(BUILD_ANDROID) && $(call log_success, "Android AAR —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!") || $(call log_error, "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Android")
	$(call log_package, "Android –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: $(ANDROID_ARTIFACT)")

clean:
	$(call log_info, "–û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–±–æ—Ä–∫–∏...")
	@rm -rf $(BUILDDIR)
	$(call log_success, "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–±–æ—Ä–∫–∏ –æ—á–∏—â–µ–Ω–∞!")

.PHONY: help
help:
	$(call print_header)
	@echo "$(CYAN)–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@echo ""
	@echo "  $(YELLOW)make ios$(NC)        - –°–æ–±—Ä–∞—Ç—å –¥–ª—è iOS"
	@echo "  $(YELLOW)make macos$(NC)      - –°–æ–±—Ä–∞—Ç—å –¥–ª—è macOS"
	@echo "  $(YELLOW)make android$(NC)    - –°–æ–±—Ä–∞—Ç—å –¥–ª—è Android"
	@echo "  $(YELLOW)make allapple$(NC)   - –°–æ–±—Ä–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö Apple –ø–ª–∞—Ç—Ñ–æ—Ä–º"
	@echo "  $(YELLOW)make all$(NC)        - –°–æ–±—Ä–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"
	@echo "  $(YELLOW)make clean$(NC)      - –û—á–∏—Å—Ç–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–±–æ—Ä–∫–∏"
	@echo "  $(YELLOW)make help$(NC)       - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
	@echo ""
	@echo "$(CYAN)–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã:$(NC)"
	@echo "  ‚Ä¢ TCP, UDP, WebSocket, gRPC"
	@echo "  ‚Ä¢ HTTP/2, QUIC, KCP"
	@echo "  ‚Ä¢ $(GREEN)SplitHTTP$(NC) (–Ω–æ–≤—ã–π!)"
	@echo "  ‚Ä¢ Reality, TLS"
	@echo ""
