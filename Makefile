# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
RED=\033[0;31m
GREEN=\033[0;32m
YELLOW=\033[1;33m
BLUE=\033[0;34m
PURPLE=\033[0;35m
CYAN=\033[0;36m
WHITE=\033[1;37m
NC=\033[0m # No Color

# –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
CHECK=‚úì
CROSS=‚úó
ARROW=‚Üí
BUILDING=üî®
PACKAGE=üì¶

BUILDDIR=$(shell pwd)/build
BUILDDIR_IOS=$(BUILDDIR)/ios
BUILDDIR_MACOS=$(BUILDDIR)/macos
BUILDDIR_ANDROID=$(BUILDDIR)/android

APPLE_ARTIFACT=$(BUILDDIR)/XRayCoreIOSWrapper.xcframework
ANDROID_ARTIFACT=$(BUILDDIR)/xray.aar

IOS_TARGET=ios/arm64
IOS_SIMULATOR_TARGET=iossimulator
MACOS_TARGET=macos

IOS_VERSION=14.0
ANDROID_API=24

LDFLAGS='-s -w -extldflags -lresolv'
IMPORT_PATH=github.com/JustYay/XrayCore-BasicWrapper

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
define log_info
	echo "$(CYAN)$(ARROW) $(1)$(NC)"
endef

define log_success
	echo "$(GREEN)$(CHECK) $(1)$(NC)"
endef

define log_error
	echo "$(RED)$(CROSS) $(1)$(NC)"
endef

define log_building
	echo "$(YELLOW)$(BUILDING) $(1)$(NC)"
endef

define log_package
	echo "$(PURPLE)$(PACKAGE) $(1)$(NC)"
endef

define print_header
	echo ""
	echo "$(WHITE)‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó$(NC)"
	echo "$(WHITE)‚ïë                    XRay Core Mobile Wrapper                  ‚ïë$(NC)"
	echo "$(WHITE)‚ïë                        Build System                          ‚ïë$(NC)"
	echo "$(WHITE)‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù$(NC)"
	echo ""
endef

setup:
	@$(call print_header)
	@$(call log_info,–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...)
	@$(call log_building,–ü—Ä–æ–≤–µ—Ä–∫–∞ Go –≤–µ—Ä—Å–∏–∏...)
	@go version || { $(call log_error,Go –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Go 1.20+); exit 1; }
	@$(call log_building,–£—Å—Ç–∞–Ω–æ–≤–∫–∞ gomobile...)
	@go install golang.org/x/mobile/cmd/gomobile@latest && \
		$(call log_success,gomobile —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!) || \
		$(call log_error,–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ gomobile)
	@$(call log_building,–£—Å—Ç–∞–Ω–æ–≤–∫–∞ gobind...)
	@go install golang.org/x/mobile/cmd/gobind@latest && \
		$(call log_success,gobind —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!) || \
		$(call log_error,–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ gobind)
	@$(call log_building,–£—Å—Ç–∞–Ω–æ–≤–∫–∞ mobile bind –ø–∞–∫–µ—Ç–∞...)
	@go get golang.org/x/mobile/bind && \
		$(call log_success,mobile bind –ø–∞–∫–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!) || \
		$(call log_error,–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ mobile bind)
	@$(call log_building,–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è gomobile...)
	@export PATH=$$PATH:$$HOME/go/bin && gomobile init && \
		$(call log_success,gomobile –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!) || \
		$(call log_error,–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ gomobile)
	@$(call log_building,–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞...)
	@go mod tidy && \
		$(call log_success,–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!) || \
		$(call log_error,–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
	@$(call log_success,–°—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Ç–æ–≤–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å make ios –∏–ª–∏ make android)

all: setup ios android
	@$(call log_package,–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≥–æ—Ç–æ–≤—ã.)

ios: check-setup
	@$(call print_header)
	@$(call log_info,–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É –¥–ª—è iOS...)
	@mkdir -p $(BUILDDIR)
	@$(call log_building,–ö–æ–º–ø–∏–ª—è—Ü–∏—è iOS framework...)
	@export PATH=$$PATH:$$HOME/go/bin && \
		gomobile bind -v -target=ios -o $(APPLE_ARTIFACT) -ldflags $(LDFLAGS) $(IMPORT_PATH) && \
		$(call log_success,iOS framework —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!) || \
		$(call log_error,–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ iOS)
	@$(call log_package,iOS –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: $(APPLE_ARTIFACT))

macos: check-setup
	@$(call print_header)
	@$(call log_info,–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É –¥–ª—è macOS...)
	@mkdir -p $(BUILDDIR)
	@$(call log_building,–ö–æ–º–ø–∏–ª—è—Ü–∏—è macOS framework...)
	@export PATH=$$PATH:$$HOME/go/bin && \
		gomobile bind -v -target=macos -o $(APPLE_ARTIFACT) -ldflags $(LDFLAGS) $(IMPORT_PATH) && \
		$(call log_success,macOS framework —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!) || \
		$(call log_error,–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ macOS)
	@$(call log_package,macOS –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: $(APPLE_ARTIFACT))

android: check-setup
	@$(call print_header)
	@$(call log_info,–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É –¥–ª—è Android...)
	@mkdir -p $(BUILDDIR_ANDROID)
	@$(call log_building,–ö–æ–º–ø–∏–ª—è—Ü–∏—è Android AAR...)
	@export PATH=$$PATH:$$HOME/go/bin && \
		cd $(BUILDDIR_ANDROID) && \
		gomobile bind -v -target=android -androidapi $(ANDROID_API) -o xray.aar -ldflags='-s -w' $(IMPORT_PATH) && \
		$(call log_success,Android AAR —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!) || \
		$(call log_error,–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Android)
	@$(call log_package,Android –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: $(BUILDDIR_ANDROID)/xray.aar)

check-setup:
	@export PATH=$$PATH:$$HOME/go/bin && command -v gomobile >/dev/null 2>&1 || { \
		$(call log_error,gomobile –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: make setup); \
		exit 1; \
	}

clean:
	@$(call log_info,–û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–±–æ—Ä–∫–∏...)
	@rm -rf $(BUILDDIR)
	@$(call log_success,–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–±–æ—Ä–∫–∏ –æ—á–∏—â–µ–Ω–∞!)

.PHONY: help setup check-setup
help:
	@$(call print_header)
	@echo "$(CYAN)–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@echo ""
	@echo "  $(YELLOW)make setup$(NC)      - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ä–µ–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)"
	@echo "  $(YELLOW)make ios$(NC)        - –°–æ–±—Ä–∞—Ç—å –¥–ª—è iOS"
	@echo "  $(YELLOW)make macos$(NC)      - –°–æ–±—Ä–∞—Ç—å –¥–ª—è macOS"
	@echo "  $(YELLOW)make android$(NC)    - –°–æ–±—Ä–∞—Ç—å –¥–ª—è Android"
	@echo "  $(YELLOW)make all$(NC)        - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ä–µ–¥—É –∏ —Å–æ–±—Ä–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"
	@echo "  $(YELLOW)make clean$(NC)      - –û—á–∏—Å—Ç–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–±–æ—Ä–∫–∏"
	@echo "  $(YELLOW)make help$(NC)       - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
	@echo ""
	@echo "$(CYAN)–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã:$(NC)"
	@echo "  ‚Ä¢ TCP, UDP, WebSocket, gRPC"
	@echo "  ‚Ä¢ HTTP/2, QUIC, KCP"
	@echo "  ‚Ä¢ $(GREEN)SplitHTTP$(NC) (–Ω–æ–≤—ã–π!)"
	@echo "  ‚Ä¢ Reality, TLS"
	@echo ""
	@echo "$(CYAN)–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:$(NC)"
	@echo "  1. $(YELLOW)make setup$(NC)   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ä–µ–¥—É (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)"
	@echo "  2. $(YELLOW)make ios$(NC)     - –°–æ–±—Ä–∞—Ç—å –¥–ª—è iOS"
	@echo "  3. $(YELLOW)make android$(NC) - –°–æ–±—Ä–∞—Ç—å –¥–ª—è Android"
	@echo ""
